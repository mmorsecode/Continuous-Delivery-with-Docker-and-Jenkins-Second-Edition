pipeline {
    agent {
        label 'docker-agent'
    }

    environment {
        REGISTRY       = "https://localhost:5001"
        REGISTRY_HOST  = "localhost:5001"
        PROJECT_DIR    = "Chapter08/sample1"
        IMAGE_NAME     = "calculator"
        IMAGE_TAG      = "1.0"
    }

    stages {
        stage('Install Docker CLI') {
            steps {
                sh 'apt-get update && apt-get install -y docker.io'
            }
        }

        stage('Checkout code and prepare environment') {
            steps {
                git url: 'https://github.com/mmorsecode/Continuous-Delivery-with-Docker-and-Jenkins-Second-Edition.git',
                    branch: "${env.BRANCH_NAME}"
                sh '''
                    set -e
                    cd ${PROJECT_DIR}
                    chmod +x gradlew
                '''
            }
        }

        stage('Run Tests') {
            steps {
                script {
                    // Adjust image name and tag for feature branches
                    if (!env.BRANCH_NAME.startsWith('master')) {
                        env.IMAGE_NAME = "calculator-feature"
                        env.IMAGE_TAG = "0.1"
                    }
                }
                sh '''
                    set -e
                    cd ${PROJECT_DIR}
                    ./gradlew build
                '''
            }
        }

        stage('Code Coverage') {
            when {
                branch 'master'
            }
            steps {
                sh '''
                    set -e
                    cd ${PROJECT_DIR}
                    ./gradlew jacocoTestReport
                '''
                publishHTML(target: [
                    reportDir: "${PROJECT_DIR}/build/reports/jacoco/test/html",
                    reportFiles: 'index.html',
                    reportName: "JaCoCo Coverage Report"
                ])
            }
        }

        stage('Login to Registry and build image') {
            when {
                not {
                    branch 'playground'
                }
            }
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'docker-registry', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                        sh '''
                            set -e
                            cd ${PROJECT_DIR}
                            echo "$DOCKER_PASS" | docker login $REGISTRY -u "$DOCKER_USER" --password-stdin
                            docker build -t ${IMAGE_NAME} .
                            docker tag ${IMAGE_NAME} ${REGISTRY_HOST}/${IMAGE_NAME}:${IMAGE_TAG}
                            docker push ${REGISTRY_HOST}/${IMAGE_NAME}:${IMAGE_TAG}
                        '''
                    }
                }
            }
        }
    }

    post {
        success {
            echo 'Build and push completed successfully.'
        }
        failure {
            echo 'Build or push failed.'
        }
    }
}

