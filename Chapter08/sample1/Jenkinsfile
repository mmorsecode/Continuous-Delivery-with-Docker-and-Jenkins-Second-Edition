pipeline {
    agent {
        label 'docker-agent'
    }

    environment {
        PROJECT_DIR = "Chapter08/sample1"
        REGISTRY = "localhost:5001"
        IMAGE_NAME = "calculator"
    }

    stages {
        stage('Prepare Environment') {
            steps {
                sh '''
                cd $PROJECT_DIR
                chmod +x gradlew
                '''
            }
        }

        stage('Compile') {
            steps {
                sh "cd $PROJECT_DIR && ./gradlew compileJava"
            }
        }

        stage('Unit Test') {
            steps {
                sh "cd $PROJECT_DIR && ./gradlew test"
            }
        }

        stage('Code Coverage') {
            when {
                branch 'master'
            }
            steps {
                sh "cd $PROJECT_DIR && ./gradlew jacocoTestReport"
                publishHTML(target: [
                    reportDir: "$PROJECT_DIR/build/reports/jacoco/test/html",
                    reportFiles: 'index.html',
                    reportName: "JaCoCo Report"
                ])
            }
        }

        stage('Static Analysis') {
            when {
                anyOf {
                    branch 'master'
                    expression { return env.BRANCH_NAME =~ /feature.*/ }
                }
            }
            steps {
                sh "cd $PROJECT_DIR && ./gradlew checkstyleMain"
                publishHTML(target: [
                    reportDir: "$PROJECT_DIR/build/reports/checkstyle/main",
                    reportFiles: 'main.html',
                    reportName: "Checkstyle Report"
                ])
            }
        }

        stage('Validate Branch') {
            when {
                not {
                    anyOf {
                        branch 'master'
                        branch 'playground'
                        expression { return env.BRANCH_NAME =~ /feature.*/ }
                    }
                }
            }
            steps {
                error 'Invalid branch: must be master, feature/*, or playground.'
            }
        }

        stage('Build & Push Docker Image') {
            when {
                not { branch 'playground' }
            }
            steps {
                script {
                    def imageTag = ""
                    def fullImageName = ""

                    if (env.BRANCH_NAME == 'master') {
                        imageTag = "1.0"
                        fullImageName = "${IMAGE_NAME}:${imageTag}"
                    } else if (env.BRANCH_NAME.startsWith('feature')) {
                        imageTag = "feature-0.1"
                        fullImageName = "${IMAGE_NAME}-${imageTag}"
                    }

                    withCredentials([usernamePassword(credentialsId: 'docker-registry', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                        sh """
                            cd $PROJECT_DIR
                            ./gradlew build
                            echo \$DOCKER_PASS | docker login https://$REGISTRY -u \$DOCKER_USER --password-stdin
                            docker build -t $fullImageName .
                            docker tag $fullImageName $REGISTRY/$fullImageName
                            docker push $REGISTRY/$fullImageName
                        """
                    }
                }
            }
        }
    }

    post {
        success {
            echo 'tests pass!'
        }
        failure {
            echo 'tests fail!'
        }
    }
}

